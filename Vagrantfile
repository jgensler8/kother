
Vagrant.configure("2") do |config|
  config.vm.box = "coreos-stable"
  config.vm.box_check_update = false
  config.vm.network "private_network", type: "dhcp"
  config.landrush.enabled = true
  config.landrush.tld = 'vagrant.local'

  

config.vm.define "etcd-lb" do |lb|
    lb.vm.hostname = "etcd-lb.vagrant.local"
    lb.vm.provision :shell, :inline => "echo 'CgoKZXZlbnRzIHsKICAgIHdvcmtlcl9jb25uZWN0aW9ucyAgMTAyNDsgICMjIERlZmF1bHQ6IDEwMjQKfQpzdHJlYW0geyAKICAgIAogICAgdXBzdHJlYW0gZXRjZC0yMzc5LXVwc3RyZWFtIHsgCiAgICAgICAgc2VydmVyIGV0Y2QtMC52YWdyYW50LmxvY2FsOjIzNzk7CiAgICB9CiAgICBzZXJ2ZXIgewogICAgICAgIGxpc3RlbiAgICAgMjM3OTsKICAgICAgICBwcm94eV9wYXNzIGV0Y2QtMjM3OS11cHN0cmVhbTsKICAgIH0KfQo=' | base64 -d -w 0 > /tmp/nginx.conf", :privileged => true
    lb.vm.provision :shell, :inline => "docker run -d   -p 2379:2379  --net=host --privileged --name nginx --restart always -v /tmp/nginx.conf:/etc/nginx/nginx.conf nginx", :privileged => true
    lb.vm.provider "virtualbox" do |v|
	v.memory = 256
	v.cpus = 1
    end
end
  
(1..1).each do |i|
	config.vm.define "etcd-%d" % i do |target|
	    target.vm.hostname = "etcd-%d.vagrant.local" % i
	    target.vm.provision :shell, :inline => "echo 'I2Nsb3VkLWNvbmZpZwpzc2hfYXV0aG9yaXplZF9rZXlzOiBbXQpjb3Jlb3M6CiAgZXRjZDoKICAgIGFkZHI6ICIiCiAgICBhZHZlcnRpc2VfY2xpZW50X3VybHM6ICIiCiAgICBiaW5kX2FkZHI6ICIiCiAgICBjYV9maWxlOiAiIgogICAgY2VydF9maWxlOiAiIgogICAgY2x1c3Rlcl9hY3RpdmVfc2l6ZTogMAogICAgY2x1c3Rlcl9yZW1vdmVfZGVsYXk6IDAKICAgIGNsdXN0ZXJfc3luY19pbnRlcnZhbDogMAogICAgY29yczogIiIKICAgIGRhdGFfZGlyOiAiIgogICAgZGlzY292ZXJ5OiAiIgogICAgZGlzY292ZXJ5X2ZhbGxiYWNrOiAiIgogICAgZGlzY292ZXJ5X3NydjogIiIKICAgIGRpc2NvdmVyeV9wcm94eTogIiIKICAgIGVsZWN0aW9uX3RpbWVvdXQ6IDAKICAgIGZvcmNlX25ld19jbHVzdGVyOiBmYWxzZQogICAgZ3JhcGhpdGVfaG9zdDogIiIKICAgIGhlYXJ0YmVhdF9pbnRlcnZhbDogMAogICAgaHR0cF9yZWFkX3RpbWVvdXQ6IDAKICAgIGh0dHBfd3JpdGVfdGltZW91dDogMAogICAgaW5pdGlhbF9hZHZlcnRpc2VfcGVlcl91cmxzOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3N0YXRlOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3Rva2VuOiAiIgogICAga2V5X2ZpbGU6ICIiCiAgICBsaXN0ZW5fY2xpZW50X3VybHM6ICIiCiAgICBsaXN0ZW5fcGVlcl91cmxzOiAiIgogICAgbWF4X3Jlc3VsdF9idWZmZXI6IDAKICAgIG1heF9yZXRyeV9hdHRlbXB0czogMAogICAgbWF4X3NuYXBzaG90czogMAogICAgbWF4X3dhbHM6IDAKICAgIG5hbWU6ICIiCiAgICBwZWVyX2FkZHI6ICIiCiAgICBwZWVyX2JpbmRfYWRkcjogIiIKICAgIHBlZXJfY2FfZmlsZTogIiIKICAgIHBlZXJfY2VydF9maWxlOiAiIgogICAgcGVlcl9lbGVjdGlvbl90aW1lb3V0OiAwCiAgICBwZWVyX2hlYXJ0YmVhdF9pbnRlcnZhbDogMAogICAgcGVlcl9rZXlfZmlsZTogIiIKICAgIHBlZXJzOiAiIgogICAgcGVlcnNfZmlsZTogIiIKICAgIHByb3h5OiAiIgogICAgcmV0cnlfaW50ZXJ2YWw6IDAKICAgIHNuYXBzaG90OiBmYWxzZQogICAgc25hcHNob3RfY291bnQ6IDAKICAgIHRyYWNlOiAiIgogICAgdmVyYm9zZTogZmFsc2UKICAgIHZlcnlfdmVyYm9zZTogZmFsc2UKICAgIHZlcnlfdmVyeV92ZXJib3NlOiBmYWxzZQogIGV0Y2QyOgogICAgYWR2ZXJ0aXNlX2NsaWVudF91cmxzOiAiIgogICAgY2FfZmlsZTogIiIKICAgIGNlcnRfZmlsZTogIiIKICAgIGNsaWVudF9jZXJ0X2F1dGg6IGZhbHNlCiAgICBjb3JzOiAiIgogICAgZGF0YV9kaXI6ICIiCiAgICBkZWJ1ZzogZmFsc2UKICAgIGRpc2NvdmVyeTogIiIKICAgIGRpc2NvdmVyeV9mYWxsYmFjazogIiIKICAgIGRpc2NvdmVyeV9zcnY6ICIiCiAgICBkaXNjb3ZlcnlfcHJveHk6ICIiCiAgICBlbGVjdGlvbl90aW1lb3V0OiAwCiAgICBlbmFibGVfcHByb2Y6IGZhbHNlCiAgICBmb3JjZV9uZXdfY2x1c3RlcjogZmFsc2UKICAgIGhlYXJ0YmVhdF9pbnRlcnZhbDogMAogICAgaW5pdGlhbF9hZHZlcnRpc2VfcGVlcl91cmxzOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3N0YXRlOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3Rva2VuOiAiIgogICAga2V5X2ZpbGU6ICIiCiAgICBsaXN0ZW5fY2xpZW50X3VybHM6ICIiCiAgICBsaXN0ZW5fcGVlcl91cmxzOiAiIgogICAgbG9nX3BhY2thZ2VfbGV2ZWxzOiAiIgogICAgbWF4X3NuYXBzaG90czogMAogICAgbWF4X3dhbHM6IDAKICAgIG5hbWU6ICIiCiAgICBwZWVyX2NhX2ZpbGU6ICIiCiAgICBwZWVyX2NlcnRfZmlsZTogIiIKICAgIHBlZXJfa2V5X2ZpbGU6ICIiCiAgICBwZWVyX2NsaWVudF9jZXJ0X2F1dGg6IGZhbHNlCiAgICBwZWVyX3RydXN0ZWRfY2FfZmlsZTogIiIKICAgIHByb3h5OiAiIgogICAgcHJveHlfZGlhbF90aW1lb3V0OiAwCiAgICBwcm94eV9mYWlsdXJlX3dhaXQ6IDAKICAgIHByb3h5X3JlYWRfdGltZW91dDogMAogICAgcHJveHlfcmVmcmVzaF9pbnRlcnZhbDogMAogICAgcHJveHlfd3JpdGVfdGltZW91dDogMAogICAgc25hcHNob3RfY291bnQ6IDAKICAgIHN0cmljdF9yZWNvbmZpZ19jaGVjazogZmFsc2UKICAgIHRydXN0ZWRfY2FfZmlsZTogIiIKICAgIHdhbF9kaXI6ICIiCiAgZmxhbm5lbDoKICAgIGV0Y2RfZW5kcG9pbnRzOiAiIgogICAgZXRjZF9jYWZpbGU6ICIiCiAgICBldGNkX2NlcnRmaWxlOiAiIgogICAgZXRjZF9rZXlmaWxlOiAiIgogICAgZXRjZF9wcmVmaXg6ICIiCiAgICBldGNkX3VzZXJuYW1lOiAiIgogICAgZXRjZF9wYXNzd29yZDogIiIKICAgIGlwX21hc3E6ICIiCiAgICBzdWJuZXRfZmlsZTogIiIKICAgIGludGVyZmFjZTogIiIKICAgIHB1YmxpY19pcDogIiIKICBmbGVldDoKICAgIGFnZW50X3R0bDogIiIKICAgIGF1dGhvcml6ZWRfa2V5c19maWxlOiAiIgogICAgZGlzYWJsZV9lbmdpbmU6IGZhbHNlCiAgICBlbmdpbmVfcmVjb25jaWxlX2ludGVydmFsOiAwCiAgICBldGNkX2NhZmlsZTogIiIKICAgIGV0Y2RfY2VydGZpbGU6ICIiCiAgICBldGNkX2tleWZpbGU6ICIiCiAgICBldGNkX2tleV9wcmVmaXg6ICIiCiAgICBldGNkX3JlcXVlc3RfdGltZW91dDogMAogICAgZXRjZF9zZXJ2ZXJzOiAiIgogICAgZXRjZF91c2VybmFtZTogIiIKICAgIGV0Y2RfcGFzc3dvcmQ6ICIiCiAgICBtZXRhZGF0YTogIiIKICAgIHB1YmxpY19pcDogIiIKICAgIHRva2VuX2xpbWl0OiAwCiAgICB2ZXJib3NpdHk6IDAKICAgIHZlcmlmeV91bml0czogZmFsc2UKICBsb2Nrc21pdGg6CiAgICBlbmRwb2ludDogIiIKICAgIGV0Y2RfY2FmaWxlOiAiIgogICAgZXRjZF9jZXJ0ZmlsZTogIiIKICAgIGV0Y2Rfa2V5ZmlsZTogIiIKICAgIGV0Y2RfdXNlcm5hbWU6ICIiCiAgICBldGNkX3Bhc3N3b3JkOiAiIgogICAgZ3JvdXA6ICIiCiAgICB3aW5kb3dfc3RhcnQ6ICIiCiAgICB3aW5kb3dfbGVuZ3RoOiAiIgogIG9lbToKICAgIGlkOiAiIgogICAgbmFtZTogIiIKICAgIHZlcnNpb25faWQ6ICIiCiAgICBob21lX3VybDogIiIKICAgIGJ1Z19yZXBvcnRfdXJsOiAiIgogIHVwZGF0ZToKICAgIHJlYm9vdF9zdHJhdGVneTogIiIKICAgIGdyb3VwOiAiIgogICAgc2VydmVyOiAiIgogIHVuaXRzOgogIC0gbmFtZToga3ViZWxldC5zZXJ2aWNlCiAgICBtYXNrOiBmYWxzZQogICAgZW5hYmxlOiB0cnVlCiAgICBydW50aW1lOiBmYWxzZQogICAgY29udGVudDogfAogICAgICBbU2VydmljZV0KICAgICAgRXhlY1N0YXJ0UHJlPS91c3IvYmluL3N1ZG8gbW91bnQgLS1iaW5kIC92YXIvbGliL2t1YmVsZXQgL3Zhci9saWIva3ViZWxldAogICAgICBFeGVjU3RhcnRQcmU9L3Vzci9iaW4vc3VkbyBtb3VudCAtLW1ha2Utc2hhcmVkIC92YXIvbGliL2t1YmVsZXQKICAgICAgRXhlY1N0YXJ0UHJlPS91c3IvYmluL2RvY2tlciBwdWxsIHF1YXkuaW8vY29yZW9zL2h5cGVya3ViZTp2MS41LjJfY29yZW9zLjIKICAgICAgRXhlY1N0YXJ0UHJlPS0vdXNyL2Jpbi9kb2NrZXIgcm0ga3ViZWxldAogICAgICBFeGVjU3RhcnQ9L3Vzci9iaW4vZG9ja2VyIHJ1biAtLXBpZD1ob3N0IC0tbmV0PWhvc3QgLS1wcml2aWxlZ2VkIC0tbmFtZSBrdWJlbGV0IC0taG9zdG5hbWUga3ViZWxldC52YWdyYW50LmxvY2FsIC12IC9zeXM6L3N5czpybyAtdiAvdmFyL3J1bjovdmFyL3J1bjpydyAtdiAvdmFyL2xpYi9kb2NrZXI6L3Zhci9saWIvZG9ja2VyOnJ3IC12IC92YXIvbGliL2t1YmVsZXQ6L3Zhci9saWIva3ViZWxldDpzaGFyZWQgcXVheS5pby9jb3Jlb3MvaHlwZXJrdWJlOnYxLjUuMl9jb3Jlb3MuMiAva3ViZWxldCAtLWFwaS1zZXJ2ZXJzPWh0dHBzOi8vYXBpc2VydmVyLnZhZ3JhbnQubG9jYWw6NDQzIC0tcmVnaXN0ZXItc2NoZWR1bGFibGU9ZmFsc2UgLS1jb250YWluZXItcnVudGltZT1kb2NrZXIgLS1hbGxvdy1wcml2aWxlZ2VkPXRydWUgLS1wb2QtbWFuaWZlc3QtcGF0aD0vdmFyL2xpYi9rdWJlbGV0L3BvZHMgLS1jbHVzdGVyX2Rucz0xMC4xLjAuMC8yNCAtLWNsdXN0ZXJfZG9tYWluPXZhZ3JhbnQubG9jYWwKICAgICAgRXhlY1N0b3A9LS91c3IvYmluL2RvY2tlciBzdG9wIGt1YmVsZXQKICAgICAgRXhlY1N0b3A9LS91c3IvYmluL2RvY2tlciBybSBrdWJlbGV0CiAgICAgIFJlc3RhcnQ9YWx3YXlzCiAgICAgIFJlc3RhcnRTZWM9MQoKICAgICAgW0luc3RhbGxdCiAgICAgIFdhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0CgogICAgICBbVW5pdF0KICAgICAgQWZ0ZXI9ZG9ja2VyLnNlcnZpY2UKICAgIGNvbW1hbmQ6IHN0YXJ0CiAgICBkcm9wX2luczogW10KICAtIG5hbWU6IGRvY2tlci5zZXJ2aWNlCiAgICBtYXNrOiBmYWxzZQogICAgZW5hYmxlOiBmYWxzZQogICAgcnVudGltZTogZmFsc2UKICAgIGNvbnRlbnQ6ICIiCiAgICBjb21tYW5kOiAiIgogICAgZHJvcF9pbnM6CiAgICAtIG5hbWU6IGRvY2tlci0xMC5jb25mCiAgICAgIGNvbnRlbnQ6IHwtCiAgICAgICAgW1Nlcml2Y2VdCiAgICAgICAgRW52aXJvbm1lbnQ9RE9DS0VSX09QVFM9IiR7RE9DS0VSX09QVFN9IC0tbG9nLW9wdCBsb2ctbGltaXQ9NTBtIgp3cml0ZV9maWxlczoKLSBlbmNvZGluZzogYmFzZTY0CiAgY29udGVudDogZXlKcmFXNWtJam9pVUc5a0lpd2lZWEJwVm1WeWMybHZiaUk2SW5ZeElpd2liV1YwWVdSaGRHRWlPbnNpYm1GdFpTSTZJbVYwWTJRaUxDSmpjbVZoZEdsdmJsUnBiV1Z6ZEdGdGNDSTZiblZzYkgwc0luTndaV01pT25zaVkyOXVkR0ZwYm1WeWN5STZXM3NpYm1GdFpTSTZJbVYwWTJRaUxDSnBiV0ZuWlNJNkluRjFZWGt1YVc4dlkyOXlaVzl6TDJWMFkyUTZiR0YwWlhOMElpd2ljRzl5ZEhNaU9sdDdJbTVoYldVaU9pSmpiR2xsYm5RaUxDSm9iM04wVUc5eWRDSTZNak0zT1N3aVkyOXVkR0ZwYm1WeVVHOXlkQ0k2TWpNM09YMWRMQ0p5WlhOdmRYSmpaWE1pT25zaWNtVnhkV1Z6ZEhNaU9uc2lZM0IxSWpvaU1UQXdiU0o5ZlN3aWJHbDJaVzVsYzNOUWNtOWlaU0k2ZXlKb2RIUndSMlYwSWpwN0luQmhkR2dpT2lJdmFHVmhiSFJvZWlJc0luQnZjblFpT2pJek56a3NJbWh2YzNRaU9pSXhNamN1TUM0d0xqRWlmU3dpYVc1cGRHbGhiRVJsYkdGNVUyVmpiMjVrY3lJNk5Td2lkR2x0Wlc5MWRGTmxZMjl1WkhNaU9qWXdmWDFkTENKb2IzTjBUbVYwZDI5eWF5STZkSEoxWlgwc0luTjBZWFIxY3lJNmUzMTkKICBvd25lcjogcm9vdDpyb290CiAgcGF0aDogL3Zhci9saWIva3ViZWxldC9wb2RzL2V0Y2QuanNvbgogIHBlcm1pc3Npb25zOiAiMDc1NSIKaG9zdG5hbWU6ICIiCnVzZXJzOiBbXQptYW5hZ2VfZXRjX2hvc3RzOiAiIgo=' | base64 -d -w 0 > /tmp/vagrantfile-user-data", :privileged => true
	    target.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
	    target.vm.provider "virtualbox" do |v|
		v.memory = 1024
		v.cpus = 1
	    end
	end
end

  

config.vm.define "vault-lb" do |lb|
    lb.vm.hostname = "vault-lb.vagrant.local"
    lb.vm.provision :shell, :inline => "echo 'CgoKZXZlbnRzIHsKICAgIHdvcmtlcl9jb25uZWN0aW9ucyAgMTAyNDsgICMjIERlZmF1bHQ6IDEwMjQKfQpzdHJlYW0geyAKICAgIAogICAgdXBzdHJlYW0gdmF1bHQtODA4MS11cHN0cmVhbSB7IAogICAgICAgIHNlcnZlciB2YXVsdC0wLnZhZ3JhbnQubG9jYWw6ODA4MTsKICAgIH0KICAgIHNlcnZlciB7CiAgICAgICAgbGlzdGVuICAgICA4MDgxOwogICAgICAgIHByb3h5X3Bhc3MgdmF1bHQtODA4MS11cHN0cmVhbTsKICAgIH0KfQo=' | base64 -d -w 0 > /tmp/nginx.conf", :privileged => true
    lb.vm.provision :shell, :inline => "docker run -d   -p 8081:8081  --net=host --privileged --name nginx --restart always -v /tmp/nginx.conf:/etc/nginx/nginx.conf nginx", :privileged => true
    lb.vm.provider "virtualbox" do |v|
	v.memory = 256
	v.cpus = 1
    end
end
  
(1..1).each do |i|
	config.vm.define "vault-%d" % i do |target|
	    target.vm.hostname = "vault-%d.vagrant.local" % i
	    target.vm.provision :shell, :inline => "echo 'I2Nsb3VkLWNvbmZpZwpzc2hfYXV0aG9yaXplZF9rZXlzOiBbXQpjb3Jlb3M6CiAgZXRjZDoKICAgIGFkZHI6ICIiCiAgICBhZHZlcnRpc2VfY2xpZW50X3VybHM6ICIiCiAgICBiaW5kX2FkZHI6ICIiCiAgICBjYV9maWxlOiAiIgogICAgY2VydF9maWxlOiAiIgogICAgY2x1c3Rlcl9hY3RpdmVfc2l6ZTogMAogICAgY2x1c3Rlcl9yZW1vdmVfZGVsYXk6IDAKICAgIGNsdXN0ZXJfc3luY19pbnRlcnZhbDogMAogICAgY29yczogIiIKICAgIGRhdGFfZGlyOiAiIgogICAgZGlzY292ZXJ5OiAiIgogICAgZGlzY292ZXJ5X2ZhbGxiYWNrOiAiIgogICAgZGlzY292ZXJ5X3NydjogIiIKICAgIGRpc2NvdmVyeV9wcm94eTogIiIKICAgIGVsZWN0aW9uX3RpbWVvdXQ6IDAKICAgIGZvcmNlX25ld19jbHVzdGVyOiBmYWxzZQogICAgZ3JhcGhpdGVfaG9zdDogIiIKICAgIGhlYXJ0YmVhdF9pbnRlcnZhbDogMAogICAgaHR0cF9yZWFkX3RpbWVvdXQ6IDAKICAgIGh0dHBfd3JpdGVfdGltZW91dDogMAogICAgaW5pdGlhbF9hZHZlcnRpc2VfcGVlcl91cmxzOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3N0YXRlOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3Rva2VuOiAiIgogICAga2V5X2ZpbGU6ICIiCiAgICBsaXN0ZW5fY2xpZW50X3VybHM6ICIiCiAgICBsaXN0ZW5fcGVlcl91cmxzOiAiIgogICAgbWF4X3Jlc3VsdF9idWZmZXI6IDAKICAgIG1heF9yZXRyeV9hdHRlbXB0czogMAogICAgbWF4X3NuYXBzaG90czogMAogICAgbWF4X3dhbHM6IDAKICAgIG5hbWU6ICIiCiAgICBwZWVyX2FkZHI6ICIiCiAgICBwZWVyX2JpbmRfYWRkcjogIiIKICAgIHBlZXJfY2FfZmlsZTogIiIKICAgIHBlZXJfY2VydF9maWxlOiAiIgogICAgcGVlcl9lbGVjdGlvbl90aW1lb3V0OiAwCiAgICBwZWVyX2hlYXJ0YmVhdF9pbnRlcnZhbDogMAogICAgcGVlcl9rZXlfZmlsZTogIiIKICAgIHBlZXJzOiAiIgogICAgcGVlcnNfZmlsZTogIiIKICAgIHByb3h5OiAiIgogICAgcmV0cnlfaW50ZXJ2YWw6IDAKICAgIHNuYXBzaG90OiBmYWxzZQogICAgc25hcHNob3RfY291bnQ6IDAKICAgIHRyYWNlOiAiIgogICAgdmVyYm9zZTogZmFsc2UKICAgIHZlcnlfdmVyYm9zZTogZmFsc2UKICAgIHZlcnlfdmVyeV92ZXJib3NlOiBmYWxzZQogIGV0Y2QyOgogICAgYWR2ZXJ0aXNlX2NsaWVudF91cmxzOiAiIgogICAgY2FfZmlsZTogIiIKICAgIGNlcnRfZmlsZTogIiIKICAgIGNsaWVudF9jZXJ0X2F1dGg6IGZhbHNlCiAgICBjb3JzOiAiIgogICAgZGF0YV9kaXI6ICIiCiAgICBkZWJ1ZzogZmFsc2UKICAgIGRpc2NvdmVyeTogIiIKICAgIGRpc2NvdmVyeV9mYWxsYmFjazogIiIKICAgIGRpc2NvdmVyeV9zcnY6ICIiCiAgICBkaXNjb3ZlcnlfcHJveHk6ICIiCiAgICBlbGVjdGlvbl90aW1lb3V0OiAwCiAgICBlbmFibGVfcHByb2Y6IGZhbHNlCiAgICBmb3JjZV9uZXdfY2x1c3RlcjogZmFsc2UKICAgIGhlYXJ0YmVhdF9pbnRlcnZhbDogMAogICAgaW5pdGlhbF9hZHZlcnRpc2VfcGVlcl91cmxzOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3N0YXRlOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3Rva2VuOiAiIgogICAga2V5X2ZpbGU6ICIiCiAgICBsaXN0ZW5fY2xpZW50X3VybHM6ICIiCiAgICBsaXN0ZW5fcGVlcl91cmxzOiAiIgogICAgbG9nX3BhY2thZ2VfbGV2ZWxzOiAiIgogICAgbWF4X3NuYXBzaG90czogMAogICAgbWF4X3dhbHM6IDAKICAgIG5hbWU6ICIiCiAgICBwZWVyX2NhX2ZpbGU6ICIiCiAgICBwZWVyX2NlcnRfZmlsZTogIiIKICAgIHBlZXJfa2V5X2ZpbGU6ICIiCiAgICBwZWVyX2NsaWVudF9jZXJ0X2F1dGg6IGZhbHNlCiAgICBwZWVyX3RydXN0ZWRfY2FfZmlsZTogIiIKICAgIHByb3h5OiAiIgogICAgcHJveHlfZGlhbF90aW1lb3V0OiAwCiAgICBwcm94eV9mYWlsdXJlX3dhaXQ6IDAKICAgIHByb3h5X3JlYWRfdGltZW91dDogMAogICAgcHJveHlfcmVmcmVzaF9pbnRlcnZhbDogMAogICAgcHJveHlfd3JpdGVfdGltZW91dDogMAogICAgc25hcHNob3RfY291bnQ6IDAKICAgIHN0cmljdF9yZWNvbmZpZ19jaGVjazogZmFsc2UKICAgIHRydXN0ZWRfY2FfZmlsZTogIiIKICAgIHdhbF9kaXI6ICIiCiAgZmxhbm5lbDoKICAgIGV0Y2RfZW5kcG9pbnRzOiAiIgogICAgZXRjZF9jYWZpbGU6ICIiCiAgICBldGNkX2NlcnRmaWxlOiAiIgogICAgZXRjZF9rZXlmaWxlOiAiIgogICAgZXRjZF9wcmVmaXg6ICIiCiAgICBldGNkX3VzZXJuYW1lOiAiIgogICAgZXRjZF9wYXNzd29yZDogIiIKICAgIGlwX21hc3E6ICIiCiAgICBzdWJuZXRfZmlsZTogIiIKICAgIGludGVyZmFjZTogIiIKICAgIHB1YmxpY19pcDogIiIKICBmbGVldDoKICAgIGFnZW50X3R0bDogIiIKICAgIGF1dGhvcml6ZWRfa2V5c19maWxlOiAiIgogICAgZGlzYWJsZV9lbmdpbmU6IGZhbHNlCiAgICBlbmdpbmVfcmVjb25jaWxlX2ludGVydmFsOiAwCiAgICBldGNkX2NhZmlsZTogIiIKICAgIGV0Y2RfY2VydGZpbGU6ICIiCiAgICBldGNkX2tleWZpbGU6ICIiCiAgICBldGNkX2tleV9wcmVmaXg6ICIiCiAgICBldGNkX3JlcXVlc3RfdGltZW91dDogMAogICAgZXRjZF9zZXJ2ZXJzOiAiIgogICAgZXRjZF91c2VybmFtZTogIiIKICAgIGV0Y2RfcGFzc3dvcmQ6ICIiCiAgICBtZXRhZGF0YTogIiIKICAgIHB1YmxpY19pcDogIiIKICAgIHRva2VuX2xpbWl0OiAwCiAgICB2ZXJib3NpdHk6IDAKICAgIHZlcmlmeV91bml0czogZmFsc2UKICBsb2Nrc21pdGg6CiAgICBlbmRwb2ludDogIiIKICAgIGV0Y2RfY2FmaWxlOiAiIgogICAgZXRjZF9jZXJ0ZmlsZTogIiIKICAgIGV0Y2Rfa2V5ZmlsZTogIiIKICAgIGV0Y2RfdXNlcm5hbWU6ICIiCiAgICBldGNkX3Bhc3N3b3JkOiAiIgogICAgZ3JvdXA6ICIiCiAgICB3aW5kb3dfc3RhcnQ6ICIiCiAgICB3aW5kb3dfbGVuZ3RoOiAiIgogIG9lbToKICAgIGlkOiAiIgogICAgbmFtZTogIiIKICAgIHZlcnNpb25faWQ6ICIiCiAgICBob21lX3VybDogIiIKICAgIGJ1Z19yZXBvcnRfdXJsOiAiIgogIHVwZGF0ZToKICAgIHJlYm9vdF9zdHJhdGVneTogIiIKICAgIGdyb3VwOiAiIgogICAgc2VydmVyOiAiIgogIHVuaXRzOgogIC0gbmFtZToga3ViZWxldC5zZXJ2aWNlCiAgICBtYXNrOiBmYWxzZQogICAgZW5hYmxlOiB0cnVlCiAgICBydW50aW1lOiBmYWxzZQogICAgY29udGVudDogfAogICAgICBbU2VydmljZV0KICAgICAgRXhlY1N0YXJ0UHJlPS91c3IvYmluL3N1ZG8gbW91bnQgLS1iaW5kIC92YXIvbGliL2t1YmVsZXQgL3Zhci9saWIva3ViZWxldAogICAgICBFeGVjU3RhcnRQcmU9L3Vzci9iaW4vc3VkbyBtb3VudCAtLW1ha2Utc2hhcmVkIC92YXIvbGliL2t1YmVsZXQKICAgICAgRXhlY1N0YXJ0UHJlPS91c3IvYmluL2RvY2tlciBwdWxsIHF1YXkuaW8vY29yZW9zL2h5cGVya3ViZTp2MS41LjJfY29yZW9zLjIKICAgICAgRXhlY1N0YXJ0UHJlPS0vdXNyL2Jpbi9kb2NrZXIgcm0ga3ViZWxldAogICAgICBFeGVjU3RhcnQ9L3Vzci9iaW4vZG9ja2VyIHJ1biAtLXBpZD1ob3N0IC0tbmV0PWhvc3QgLS1wcml2aWxlZ2VkIC0tbmFtZSBrdWJlbGV0IC0taG9zdG5hbWUga3ViZWxldC52YWdyYW50LmxvY2FsIC12IC9zeXM6L3N5czpybyAtdiAvdmFyL3J1bjovdmFyL3J1bjpydyAtdiAvdmFyL2xpYi9kb2NrZXI6L3Zhci9saWIvZG9ja2VyOnJ3IC12IC92YXIvbGliL2t1YmVsZXQ6L3Zhci9saWIva3ViZWxldDpzaGFyZWQgcXVheS5pby9jb3Jlb3MvaHlwZXJrdWJlOnYxLjUuMl9jb3Jlb3MuMiAva3ViZWxldCAtLWFwaS1zZXJ2ZXJzPWh0dHBzOi8vYXBpc2VydmVyLnZhZ3JhbnQubG9jYWw6NDQzIC0tcmVnaXN0ZXItc2NoZWR1bGFibGU9ZmFsc2UgLS1jb250YWluZXItcnVudGltZT1kb2NrZXIgLS1hbGxvdy1wcml2aWxlZ2VkPXRydWUgLS1wb2QtbWFuaWZlc3QtcGF0aD0vdmFyL2xpYi9rdWJlbGV0L3BvZHMgLS1jbHVzdGVyX2Rucz0xMC4xLjAuMC8yNCAtLWNsdXN0ZXJfZG9tYWluPXZhZ3JhbnQubG9jYWwKICAgICAgRXhlY1N0b3A9LS91c3IvYmluL2RvY2tlciBzdG9wIGt1YmVsZXQKICAgICAgRXhlY1N0b3A9LS91c3IvYmluL2RvY2tlciBybSBrdWJlbGV0CiAgICAgIFJlc3RhcnQ9YWx3YXlzCiAgICAgIFJlc3RhcnRTZWM9MQoKICAgICAgW0luc3RhbGxdCiAgICAgIFdhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0CgogICAgICBbVW5pdF0KICAgICAgQWZ0ZXI9ZG9ja2VyLnNlcnZpY2UKICAgIGNvbW1hbmQ6IHN0YXJ0CiAgICBkcm9wX2luczogW10KICAtIG5hbWU6IGRvY2tlci5zZXJ2aWNlCiAgICBtYXNrOiBmYWxzZQogICAgZW5hYmxlOiBmYWxzZQogICAgcnVudGltZTogZmFsc2UKICAgIGNvbnRlbnQ6ICIiCiAgICBjb21tYW5kOiAiIgogICAgZHJvcF9pbnM6CiAgICAtIG5hbWU6IGRvY2tlci0xMC5jb25mCiAgICAgIGNvbnRlbnQ6IHwtCiAgICAgICAgW1Nlcml2Y2VdCiAgICAgICAgRW52aXJvbm1lbnQ9RE9DS0VSX09QVFM9IiR7RE9DS0VSX09QVFN9IC0tbG9nLW9wdCBsb2ctbGltaXQ9NTBtIgp3cml0ZV9maWxlczoKLSBlbmNvZGluZzogYmFzZTY0CiAgY29udGVudDogZXlKcmFXNWtJam9pVUc5a0lpd2lZWEJwVm1WeWMybHZiaUk2SW5ZeElpd2liV1YwWVdSaGRHRWlPbnNpYm1GdFpTSTZJblpoZFd4MElpd2libUZ0WlhOd1lXTmxJam9pZG1GMWJIUWlMQ0pqY21WaGRHbHZibFJwYldWemRHRnRjQ0k2Ym5Wc2JIMHNJbk53WldNaU9uc2lZMjl1ZEdGcGJtVnljeUk2VzNzaWJtRnRaU0k2SW5aaGRXeDBJaXdpYVcxaFoyVWlPaUk2YkdGMFpYTjBJaXdpY0c5eWRITWlPbHQ3SW01aGJXVWlPaUpqYkdsbGJuUWlMQ0pvYjNOMFVHOXlkQ0k2T0RBNE1Td2lZMjl1ZEdGcGJtVnlVRzl5ZENJNk9EQTRNWDFkTENKeVpYTnZkWEpqWlhNaU9udDlMQ0pzYVhabGJtVnpjMUJ5YjJKbElqcDdJbWgwZEhCSFpYUWlPbnNpY0dGMGFDSTZJaTlvWldGc2RHaDZJaXdpY0c5eWRDSTZPREE0TVN3aWFHOXpkQ0k2SWpFeU55NHdMakF1TVNKOUxDSnBibWwwYVdGc1JHVnNZWGxUWldOdmJtUnpJam94TlN3aWRHbHRaVzkxZEZObFkyOXVaSE1pT2pFMWZYMWRMQ0pvYjNOMFRtVjBkMjl5YXlJNmRISjFaWDBzSW5OMFlYUjFjeUk2ZTMxOQogIG93bmVyOiByb290OnJvb3QKICBwYXRoOiAvdmFyL2xpYi9rdWJlbGV0L3BvZHMvdmF1bHQuanNvbgogIHBlcm1pc3Npb25zOiAiMDc1NSIKaG9zdG5hbWU6ICIiCnVzZXJzOiBbXQptYW5hZ2VfZXRjX2hvc3RzOiAiIgo=' | base64 -d -w 0 > /tmp/vagrantfile-user-data", :privileged => true
	    target.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
	    target.vm.provider "virtualbox" do |v|
		v.memory = 1024
		v.cpus = 1
	    end
	end
end

  

config.vm.define "kube-apiserver-lb" do |lb|
    lb.vm.hostname = "kube-apiserver-lb.vagrant.local"
    lb.vm.provision :shell, :inline => "echo 'CgoKZXZlbnRzIHsKICAgIHdvcmtlcl9jb25uZWN0aW9ucyAgMTAyNDsgICMjIERlZmF1bHQ6IDEwMjQKfQpzdHJlYW0geyAKICAgIAogICAgdXBzdHJlYW0ga3ViZS1hcGlzZXJ2ZXItNDQzLXVwc3RyZWFtIHsgCiAgICAgICAgc2VydmVyIGt1YmUtYXBpc2VydmVyLTAudmFncmFudC5sb2NhbDo0NDM7CiAgICB9CiAgICBzZXJ2ZXIgewogICAgICAgIGxpc3RlbiAgICAgNDQzOwogICAgICAgIHByb3h5X3Bhc3Mga3ViZS1hcGlzZXJ2ZXItNDQzLXVwc3RyZWFtOwogICAgfQogICAgCiAgICB1cHN0cmVhbSBrdWJlLWFwaXNlcnZlci04MDgwLXVwc3RyZWFtIHsgCiAgICAgICAgc2VydmVyIGt1YmUtYXBpc2VydmVyLTAudmFncmFudC5sb2NhbDo4MDgwOwogICAgfQogICAgc2VydmVyIHsKICAgICAgICBsaXN0ZW4gICAgIDgwODA7CiAgICAgICAgcHJveHlfcGFzcyBrdWJlLWFwaXNlcnZlci04MDgwLXVwc3RyZWFtOwogICAgfQp9Cg==' | base64 -d -w 0 > /tmp/nginx.conf", :privileged => true
    lb.vm.provision :shell, :inline => "docker run -d    -p 443:443  -p 8080:8080  --net=host --privileged --name nginx --restart always -v /tmp/nginx.conf:/etc/nginx/nginx.conf nginx", :privileged => true
    lb.vm.provider "virtualbox" do |v|
	v.memory = 256
	v.cpus = 1
    end
end
  
(1..1).each do |i|
	config.vm.define "kube-apiserver-%d" % i do |target|
	    target.vm.hostname = "kube-apiserver-%d.vagrant.local" % i
	    target.vm.provision :shell, :inline => "echo '' | base64 -d -w 0 > /tmp/vagrantfile-user-data", :privileged => true
	    target.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
	    target.vm.provider "virtualbox" do |v|
		v.memory = 1024
		v.cpus = 1
	    end
	end
end

  

config.vm.define "kube-controller-manager-lb" do |lb|
    lb.vm.hostname = "kube-controller-manager-lb.vagrant.local"
    lb.vm.provision :shell, :inline => "echo 'CgoKZXZlbnRzIHsKICAgIHdvcmtlcl9jb25uZWN0aW9ucyAgMTAyNDsgICMjIERlZmF1bHQ6IDEwMjQKfQpzdHJlYW0geyAKICAgIAogICAgdXBzdHJlYW0ga3ViZS1jb250cm9sbGVyLW1hbmFnZXItMTAyNTItdXBzdHJlYW0geyAKICAgICAgICBzZXJ2ZXIga3ViZS1jb250cm9sbGVyLW1hbmFnZXItMC52YWdyYW50LmxvY2FsOjEwMjUyOwogICAgfQogICAgc2VydmVyIHsKICAgICAgICBsaXN0ZW4gICAgIDEwMjUyOwogICAgICAgIHByb3h5X3Bhc3Mga3ViZS1jb250cm9sbGVyLW1hbmFnZXItMTAyNTItdXBzdHJlYW07CiAgICB9Cn0K' | base64 -d -w 0 > /tmp/nginx.conf", :privileged => true
    lb.vm.provision :shell, :inline => "docker run -d   -p 10252:10252  --net=host --privileged --name nginx --restart always -v /tmp/nginx.conf:/etc/nginx/nginx.conf nginx", :privileged => true
    lb.vm.provider "virtualbox" do |v|
	v.memory = 256
	v.cpus = 1
    end
end
  
(1..1).each do |i|
	config.vm.define "kube-controller-manager-%d" % i do |target|
	    target.vm.hostname = "kube-controller-manager-%d.vagrant.local" % i
	    target.vm.provision :shell, :inline => "echo '' | base64 -d -w 0 > /tmp/vagrantfile-user-data", :privileged => true
	    target.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
	    target.vm.provider "virtualbox" do |v|
		v.memory = 1024
		v.cpus = 1
	    end
	end
end

  

config.vm.define "kube-scheduler-lb" do |lb|
    lb.vm.hostname = "kube-scheduler-lb.vagrant.local"
    lb.vm.provision :shell, :inline => "echo 'CgoKZXZlbnRzIHsKICAgIHdvcmtlcl9jb25uZWN0aW9ucyAgMTAyNDsgICMjIERlZmF1bHQ6IDEwMjQKfQpzdHJlYW0geyAKICAgIAogICAgdXBzdHJlYW0ga3ViZS1zY2hlZHVsZXItMTAyNTEtdXBzdHJlYW0geyAKICAgICAgICBzZXJ2ZXIga3ViZS1zY2hlZHVsZXItMC52YWdyYW50LmxvY2FsOjEwMjUxOwogICAgfQogICAgc2VydmVyIHsKICAgICAgICBsaXN0ZW4gICAgIDEwMjUxOwogICAgICAgIHByb3h5X3Bhc3Mga3ViZS1zY2hlZHVsZXItMTAyNTEtdXBzdHJlYW07CiAgICB9Cn0K' | base64 -d -w 0 > /tmp/nginx.conf", :privileged => true
    lb.vm.provision :shell, :inline => "docker run -d   -p 10251:10251  --net=host --privileged --name nginx --restart always -v /tmp/nginx.conf:/etc/nginx/nginx.conf nginx", :privileged => true
    lb.vm.provider "virtualbox" do |v|
	v.memory = 256
	v.cpus = 1
    end
end
  
(1..1).each do |i|
	config.vm.define "kube-scheduler-%d" % i do |target|
	    target.vm.hostname = "kube-scheduler-%d.vagrant.local" % i
	    target.vm.provision :shell, :inline => "echo 'I2Nsb3VkLWNvbmZpZwpzc2hfYXV0aG9yaXplZF9rZXlzOiBbXQpjb3Jlb3M6CiAgZXRjZDoKICAgIGFkZHI6ICIiCiAgICBhZHZlcnRpc2VfY2xpZW50X3VybHM6ICIiCiAgICBiaW5kX2FkZHI6ICIiCiAgICBjYV9maWxlOiAiIgogICAgY2VydF9maWxlOiAiIgogICAgY2x1c3Rlcl9hY3RpdmVfc2l6ZTogMAogICAgY2x1c3Rlcl9yZW1vdmVfZGVsYXk6IDAKICAgIGNsdXN0ZXJfc3luY19pbnRlcnZhbDogMAogICAgY29yczogIiIKICAgIGRhdGFfZGlyOiAiIgogICAgZGlzY292ZXJ5OiAiIgogICAgZGlzY292ZXJ5X2ZhbGxiYWNrOiAiIgogICAgZGlzY292ZXJ5X3NydjogIiIKICAgIGRpc2NvdmVyeV9wcm94eTogIiIKICAgIGVsZWN0aW9uX3RpbWVvdXQ6IDAKICAgIGZvcmNlX25ld19jbHVzdGVyOiBmYWxzZQogICAgZ3JhcGhpdGVfaG9zdDogIiIKICAgIGhlYXJ0YmVhdF9pbnRlcnZhbDogMAogICAgaHR0cF9yZWFkX3RpbWVvdXQ6IDAKICAgIGh0dHBfd3JpdGVfdGltZW91dDogMAogICAgaW5pdGlhbF9hZHZlcnRpc2VfcGVlcl91cmxzOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3N0YXRlOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3Rva2VuOiAiIgogICAga2V5X2ZpbGU6ICIiCiAgICBsaXN0ZW5fY2xpZW50X3VybHM6ICIiCiAgICBsaXN0ZW5fcGVlcl91cmxzOiAiIgogICAgbWF4X3Jlc3VsdF9idWZmZXI6IDAKICAgIG1heF9yZXRyeV9hdHRlbXB0czogMAogICAgbWF4X3NuYXBzaG90czogMAogICAgbWF4X3dhbHM6IDAKICAgIG5hbWU6ICIiCiAgICBwZWVyX2FkZHI6ICIiCiAgICBwZWVyX2JpbmRfYWRkcjogIiIKICAgIHBlZXJfY2FfZmlsZTogIiIKICAgIHBlZXJfY2VydF9maWxlOiAiIgogICAgcGVlcl9lbGVjdGlvbl90aW1lb3V0OiAwCiAgICBwZWVyX2hlYXJ0YmVhdF9pbnRlcnZhbDogMAogICAgcGVlcl9rZXlfZmlsZTogIiIKICAgIHBlZXJzOiAiIgogICAgcGVlcnNfZmlsZTogIiIKICAgIHByb3h5OiAiIgogICAgcmV0cnlfaW50ZXJ2YWw6IDAKICAgIHNuYXBzaG90OiBmYWxzZQogICAgc25hcHNob3RfY291bnQ6IDAKICAgIHRyYWNlOiAiIgogICAgdmVyYm9zZTogZmFsc2UKICAgIHZlcnlfdmVyYm9zZTogZmFsc2UKICAgIHZlcnlfdmVyeV92ZXJib3NlOiBmYWxzZQogIGV0Y2QyOgogICAgYWR2ZXJ0aXNlX2NsaWVudF91cmxzOiAiIgogICAgY2FfZmlsZTogIiIKICAgIGNlcnRfZmlsZTogIiIKICAgIGNsaWVudF9jZXJ0X2F1dGg6IGZhbHNlCiAgICBjb3JzOiAiIgogICAgZGF0YV9kaXI6ICIiCiAgICBkZWJ1ZzogZmFsc2UKICAgIGRpc2NvdmVyeTogIiIKICAgIGRpc2NvdmVyeV9mYWxsYmFjazogIiIKICAgIGRpc2NvdmVyeV9zcnY6ICIiCiAgICBkaXNjb3ZlcnlfcHJveHk6ICIiCiAgICBlbGVjdGlvbl90aW1lb3V0OiAwCiAgICBlbmFibGVfcHByb2Y6IGZhbHNlCiAgICBmb3JjZV9uZXdfY2x1c3RlcjogZmFsc2UKICAgIGhlYXJ0YmVhdF9pbnRlcnZhbDogMAogICAgaW5pdGlhbF9hZHZlcnRpc2VfcGVlcl91cmxzOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3N0YXRlOiAiIgogICAgaW5pdGlhbF9jbHVzdGVyX3Rva2VuOiAiIgogICAga2V5X2ZpbGU6ICIiCiAgICBsaXN0ZW5fY2xpZW50X3VybHM6ICIiCiAgICBsaXN0ZW5fcGVlcl91cmxzOiAiIgogICAgbG9nX3BhY2thZ2VfbGV2ZWxzOiAiIgogICAgbWF4X3NuYXBzaG90czogMAogICAgbWF4X3dhbHM6IDAKICAgIG5hbWU6ICIiCiAgICBwZWVyX2NhX2ZpbGU6ICIiCiAgICBwZWVyX2NlcnRfZmlsZTogIiIKICAgIHBlZXJfa2V5X2ZpbGU6ICIiCiAgICBwZWVyX2NsaWVudF9jZXJ0X2F1dGg6IGZhbHNlCiAgICBwZWVyX3RydXN0ZWRfY2FfZmlsZTogIiIKICAgIHByb3h5OiAiIgogICAgcHJveHlfZGlhbF90aW1lb3V0OiAwCiAgICBwcm94eV9mYWlsdXJlX3dhaXQ6IDAKICAgIHByb3h5X3JlYWRfdGltZW91dDogMAogICAgcHJveHlfcmVmcmVzaF9pbnRlcnZhbDogMAogICAgcHJveHlfd3JpdGVfdGltZW91dDogMAogICAgc25hcHNob3RfY291bnQ6IDAKICAgIHN0cmljdF9yZWNvbmZpZ19jaGVjazogZmFsc2UKICAgIHRydXN0ZWRfY2FfZmlsZTogIiIKICAgIHdhbF9kaXI6ICIiCiAgZmxhbm5lbDoKICAgIGV0Y2RfZW5kcG9pbnRzOiAiIgogICAgZXRjZF9jYWZpbGU6ICIiCiAgICBldGNkX2NlcnRmaWxlOiAiIgogICAgZXRjZF9rZXlmaWxlOiAiIgogICAgZXRjZF9wcmVmaXg6ICIiCiAgICBldGNkX3VzZXJuYW1lOiAiIgogICAgZXRjZF9wYXNzd29yZDogIiIKICAgIGlwX21hc3E6ICIiCiAgICBzdWJuZXRfZmlsZTogIiIKICAgIGludGVyZmFjZTogIiIKICAgIHB1YmxpY19pcDogIiIKICBmbGVldDoKICAgIGFnZW50X3R0bDogIiIKICAgIGF1dGhvcml6ZWRfa2V5c19maWxlOiAiIgogICAgZGlzYWJsZV9lbmdpbmU6IGZhbHNlCiAgICBlbmdpbmVfcmVjb25jaWxlX2ludGVydmFsOiAwCiAgICBldGNkX2NhZmlsZTogIiIKICAgIGV0Y2RfY2VydGZpbGU6ICIiCiAgICBldGNkX2tleWZpbGU6ICIiCiAgICBldGNkX2tleV9wcmVmaXg6ICIiCiAgICBldGNkX3JlcXVlc3RfdGltZW91dDogMAogICAgZXRjZF9zZXJ2ZXJzOiAiIgogICAgZXRjZF91c2VybmFtZTogIiIKICAgIGV0Y2RfcGFzc3dvcmQ6ICIiCiAgICBtZXRhZGF0YTogIiIKICAgIHB1YmxpY19pcDogIiIKICAgIHRva2VuX2xpbWl0OiAwCiAgICB2ZXJib3NpdHk6IDAKICAgIHZlcmlmeV91bml0czogZmFsc2UKICBsb2Nrc21pdGg6CiAgICBlbmRwb2ludDogIiIKICAgIGV0Y2RfY2FmaWxlOiAiIgogICAgZXRjZF9jZXJ0ZmlsZTogIiIKICAgIGV0Y2Rfa2V5ZmlsZTogIiIKICAgIGV0Y2RfdXNlcm5hbWU6ICIiCiAgICBldGNkX3Bhc3N3b3JkOiAiIgogICAgZ3JvdXA6ICIiCiAgICB3aW5kb3dfc3RhcnQ6ICIiCiAgICB3aW5kb3dfbGVuZ3RoOiAiIgogIG9lbToKICAgIGlkOiAiIgogICAgbmFtZTogIiIKICAgIHZlcnNpb25faWQ6ICIiCiAgICBob21lX3VybDogIiIKICAgIGJ1Z19yZXBvcnRfdXJsOiAiIgogIHVwZGF0ZToKICAgIHJlYm9vdF9zdHJhdGVneTogIiIKICAgIGdyb3VwOiAiIgogICAgc2VydmVyOiAiIgogIHVuaXRzOgogIC0gbmFtZToga3ViZWxldC5zZXJ2aWNlCiAgICBtYXNrOiBmYWxzZQogICAgZW5hYmxlOiB0cnVlCiAgICBydW50aW1lOiBmYWxzZQogICAgY29udGVudDogfAogICAgICBbU2VydmljZV0KICAgICAgRXhlY1N0YXJ0UHJlPS91c3IvYmluL3N1ZG8gbW91bnQgLS1iaW5kIC92YXIvbGliL2t1YmVsZXQgL3Zhci9saWIva3ViZWxldAogICAgICBFeGVjU3RhcnRQcmU9L3Vzci9iaW4vc3VkbyBtb3VudCAtLW1ha2Utc2hhcmVkIC92YXIvbGliL2t1YmVsZXQKICAgICAgRXhlY1N0YXJ0UHJlPS91c3IvYmluL2RvY2tlciBwdWxsIHF1YXkuaW8vY29yZW9zL2h5cGVya3ViZTp2MS41LjJfY29yZW9zLjIKICAgICAgRXhlY1N0YXJ0UHJlPS0vdXNyL2Jpbi9kb2NrZXIgcm0ga3ViZWxldAogICAgICBFeGVjU3RhcnQ9L3Vzci9iaW4vZG9ja2VyIHJ1biAtLXBpZD1ob3N0IC0tbmV0PWhvc3QgLS1wcml2aWxlZ2VkIC0tbmFtZSBrdWJlbGV0IC0taG9zdG5hbWUga3ViZWxldC52YWdyYW50LmxvY2FsIC12IC9zeXM6L3N5czpybyAtdiAvdmFyL3J1bjovdmFyL3J1bjpydyAtdiAvdmFyL2xpYi9kb2NrZXI6L3Zhci9saWIvZG9ja2VyOnJ3IC12IC92YXIvbGliL2t1YmVsZXQ6L3Zhci9saWIva3ViZWxldDpzaGFyZWQgcXVheS5pby9jb3Jlb3MvaHlwZXJrdWJlOnYxLjUuMl9jb3Jlb3MuMiAva3ViZWxldCAtLWFwaS1zZXJ2ZXJzPWh0dHBzOi8vYXBpc2VydmVyLnZhZ3JhbnQubG9jYWw6NDQzIC0tcmVnaXN0ZXItc2NoZWR1bGFibGU9ZmFsc2UgLS1jb250YWluZXItcnVudGltZT1kb2NrZXIgLS1hbGxvdy1wcml2aWxlZ2VkPXRydWUgLS1wb2QtbWFuaWZlc3QtcGF0aD0vdmFyL2xpYi9rdWJlbGV0L3BvZHMgLS1jbHVzdGVyX2Rucz0xMC4xLjAuMC8yNCAtLWNsdXN0ZXJfZG9tYWluPXZhZ3JhbnQubG9jYWwKICAgICAgRXhlY1N0b3A9LS91c3IvYmluL2RvY2tlciBzdG9wIGt1YmVsZXQKICAgICAgRXhlY1N0b3A9LS91c3IvYmluL2RvY2tlciBybSBrdWJlbGV0CiAgICAgIFJlc3RhcnQ9YWx3YXlzCiAgICAgIFJlc3RhcnRTZWM9MQoKICAgICAgW0luc3RhbGxdCiAgICAgIFdhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0CgogICAgICBbVW5pdF0KICAgICAgQWZ0ZXI9ZG9ja2VyLnNlcnZpY2UKICAgIGNvbW1hbmQ6IHN0YXJ0CiAgICBkcm9wX2luczogW10KICAtIG5hbWU6IGRvY2tlci5zZXJ2aWNlCiAgICBtYXNrOiBmYWxzZQogICAgZW5hYmxlOiBmYWxzZQogICAgcnVudGltZTogZmFsc2UKICAgIGNvbnRlbnQ6ICIiCiAgICBjb21tYW5kOiAiIgogICAgZHJvcF9pbnM6CiAgICAtIG5hbWU6IGRvY2tlci0xMC5jb25mCiAgICAgIGNvbnRlbnQ6IHwtCiAgICAgICAgW1Nlcml2Y2VdCiAgICAgICAgRW52aXJvbm1lbnQ9RE9DS0VSX09QVFM9IiR7RE9DS0VSX09QVFN9IC0tbG9nLW9wdCBsb2ctbGltaXQ9NTBtIgp3cml0ZV9maWxlczoKLSBlbmNvZGluZzogYmFzZTY0CiAgY29udGVudDogZXlKcmFXNWtJam9pVUc5a0lpd2lZWEJwVm1WeWMybHZiaUk2SW5ZeElpd2liV1YwWVdSaGRHRWlPbnNpYm1GdFpTSTZJbXQxWW1VdGMyTm9aV1IxYkdWeUlpd2libUZ0WlhOd1lXTmxJam9pYTNWaVpTMXplWE4wWlcwaUxDSmpjbVZoZEdsdmJsUnBiV1Z6ZEdGdGNDSTZiblZzYkgwc0luTndaV01pT25zaVkyOXVkR0ZwYm1WeWN5STZXM3NpYm1GdFpTSTZJbXQxWW1VdGMyTm9aV1IxYkdWeUlpd2lhVzFoWjJVaU9pSnhkV0Y1TG1sdkwyTnZjbVZ2Y3k5b2VYQmxjbXQxWW1VNmRqRXVOUzR5WDJOdmNtVnZjeTR5SWl3aVkyOXRiV0Z1WkNJNld5SXZhSGx3WlhKcmRXSmxJaXdpYzJOb1pXUjFiR1Z5SWl3aUxTMXRZWE4wWlhJOWFIUjBjSE02THk5aGNHbHpaWEoyWlhJdWRtRm5jbUZ1ZEM1c2IyTmhiRG8wTkRNaUxDSXRMV3hsWVdSbGNpMWxiR1ZqZEQxMGNuVmxJbDBzSW5CdmNuUnpJanBiZXlKdVlXMWxJam9pYUhSMGNITWlMQ0pvYjNOMFVHOXlkQ0k2TVRBeU5URXNJbU52Ym5SaGFXNWxjbEJ2Y25RaU9qRXdNalV4ZlYwc0luSmxjMjkxY21ObGN5STZleUp5WlhGMVpYTjBjeUk2ZXlKamNIVWlPaUl4TURCdEluMTlMQ0pzYVhabGJtVnpjMUJ5YjJKbElqcDdJbWgwZEhCSFpYUWlPbnNpY0dGMGFDSTZJaTlvWldGc2RHaDZJaXdpY0c5eWRDSTZNVEF5TlRFc0ltaHZjM1FpT2lJeE1qY3VNQzR3TGpFaWZTd2lhVzVwZEdsaGJFUmxiR0Y1VTJWamIyNWtjeUk2TVRVc0luUnBiV1Z2ZFhSVFpXTnZibVJ6SWpveE5YMTlYU3dpYUc5emRFNWxkSGR2Y21zaU9uUnlkV1Y5TENKemRHRjBkWE1pT250OWZRPT0KICBvd25lcjogcm9vdDpyb290CiAgcGF0aDogL3Zhci9saWIva3ViZWxldC9wb2RzL2t1YmUtc2NoZWR1bGVyLmpzb24KICBwZXJtaXNzaW9uczogIjA3NTUiCmhvc3RuYW1lOiAiIgp1c2VyczogW10KbWFuYWdlX2V0Y19ob3N0czogIiIK' | base64 -d -w 0 > /tmp/vagrantfile-user-data", :privileged => true
	    target.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
	    target.vm.provider "virtualbox" do |v|
		v.memory = 1024
		v.cpus = 1
	    end
	end
end

end
